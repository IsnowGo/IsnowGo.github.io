<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[IsnowGo]]></title>
  <subtitle><![CDATA[Create my world ! Chase my Dream!]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-09-02T02:39:50.270Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[IsnowGo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[二分查找的简单运用]]></title>
    <link href="http://yoursite.com/2015/09/02/Blog6/"/>
    <id>http://yoursite.com/2015/09/02/Blog6/</id>
    <published>2015-09-01T16:00:00.000Z</published>
    <updated>2015-09-02T02:39:50.270Z</updated>
    <content type="html"><![CDATA[<p>问题描述：<br>   把一个数组的最开始的若干元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序数组的旋转。例如{3，4，5，1，2}是{1，2，3，4，5}的一个旋转，该数组的最小的元素是1.</p>
<p>首先最简单的方法是扫一遍，复杂度O(n)，很明显没有用到数组递增的特性，肯定不是最好的啊。<br>仔细观察和分析一下，会发现，其实这就是两个递增的数组。并且，前一个数组的每一个元素都比后面的数组的大。所以可以想一下用二分的思想去解决。如果data[mid]&gt;data[left]，说明该中点元素是第一个数组的，所以最小的是在后面，就可以舍弃前半段的搜索，否则，说明中间元素在后面的数组中，此时就可以去前面数组找。这样就可以用二分查找的方式找到最小的元素了。</p>
<p>但是要考虑特殊情况，就是没有元素转移到数组末尾，此时最小的元素就是第一个元素，所以还要和第一个元素取min,这才是最后的结果。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmin</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> left=<span class="number">0</span>,right=length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&gt;a[left])&#123;</span><br><span class="line">            left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min(a[<span class="number">0</span>],a[left]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[两个递增子数组的元素查找。]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[链表基本操作]]></title>
    <link href="http://yoursite.com/2015/08/20/Blog1/"/>
    <id>http://yoursite.com/2015/08/20/Blog1/</id>
    <published>2015-08-19T16:00:00.000Z</published>
    <updated>2015-08-20T09:44:14.153Z</updated>
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">Node</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> data;</span><br><span class="line">        Node next;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.data=data;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node  head=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node(<span class="number">0</span>);</span><br><span class="line">        head.next=<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(Node a )</span></span>&#123;<span class="comment">//在末尾插入</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            head.next=a;</span><br><span class="line">            a.next=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node p = head.next;</span><br><span class="line">        Node q =p.next;</span><br><span class="line">        <span class="keyword">while</span> (q!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            p=q;</span><br><span class="line">            q=q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next=a;</span><br><span class="line">        a.next=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,Node a)</span></span>&#123;<span class="comment">//在第index的后面插入a</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">1</span>;</span><br><span class="line">        Node p= head.next;</span><br><span class="line">        Node q=p.next;</span><br><span class="line">        <span class="keyword">while</span> (count&lt;index&amp;&amp;q!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            p=q;</span><br><span class="line">            q=q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count!=index)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next=a;</span><br><span class="line">        a.next=q;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;<span class="comment">//删除第index个后面的那个元素</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">1</span>;</span><br><span class="line">        Node p= head.next;</span><br><span class="line">        Node q=p.next;</span><br><span class="line">        <span class="keyword">while</span> (count&lt;index&amp;&amp;q!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            p=q;</span><br><span class="line">            q=q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count!=index)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next=q.next;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[基本的链表的创建，增加，删除操作。]]>
    
    </summary>
    
      <category term="Data_Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二叉树非递归遍历]]></title>
    <link href="http://yoursite.com/2015/08/20/Blog5/"/>
    <id>http://yoursite.com/2015/08/20/Blog5/</id>
    <published>2015-08-19T16:00:00.000Z</published>
    <updated>2015-08-20T10:23:52.172Z</updated>
    <content type="html"><![CDATA[<ol>
<li>前序遍历。</li>
</ol>
<p>思想： 首先访问根，然后把访问根的入栈，访问该根的左子树，左子树结束之后，弹出根，访问右子树，对于右子树，重复上述。知道栈为空。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node *root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;Node*&gt;s;</span><br><span class="line">    Node * p=root;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>||!s.empty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">            s.push(p);</span><br><span class="line">            p=p-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            p=s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            p=p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>中序遍历。</li>
</ol>
<p>思想：思想和前序遍历一样。只是访问根的是在出栈的时候。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">inOrder</span><span class="params">(Node *root)</span></span>&#123;</span><br><span class="line">     <span class="built_in">stack</span>&lt;Node*&gt;s;</span><br><span class="line">    Node * p=root;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>||!s.empty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            s.push(p);</span><br><span class="line">            p=p-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            p=s.top();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">            s.pop();</span><br><span class="line">            p=p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>后序遍历。</li>
</ol>
<p>思想： 这是最难的。对于一棵树来说，我们可以把根，右孩子，左孩子一次入栈，这样出来的时候就可以是左右根了。每一次弹出栈的时候，如果该节点是没有儿子的，说明该节点可以直接访问，如果该节点是已经被访问过的，说明该节点是根，可以直接访问，否则的话，就把该节点的有孩子，左孩子一次入栈。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node *root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;Node*&gt;s;</span><br><span class="line">    Node *pre;</span><br><span class="line">    Node *p=<span class="literal">NULL</span>;</span><br><span class="line">    s.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        p=s.top();</span><br><span class="line">        <span class="keyword">if</span>((p-&gt;left==<span class="literal">NULL</span>&amp;&amp;p-&gt;right==<span class="literal">NULL</span>)||(pre!=<span class="literal">NULL</span>&amp;&amp;(pre==p-&gt;left||pre==p-&gt;right)))&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">            s.pop();</span><br><span class="line">            pre=p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;right!=<span class="literal">NULL</span>)</span><br><span class="line">                s.push(p-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;left!=<span class="literal">NULL</span>)</span><br><span class="line">                s.push(p-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[二叉树非递归遍历。]]>
    
    </summary>
    
      <category term="Data_Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二叉树相关问题]]></title>
    <link href="http://yoursite.com/2015/08/20/Blog4/"/>
    <id>http://yoursite.com/2015/08/20/Blog4/</id>
    <published>2015-08-19T16:00:00.000Z</published>
    <updated>2015-08-20T10:18:52.149Z</updated>
    <content type="html"><![CDATA[<ol>
<li>构建二叉树</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> BiTNode&#123;</span><br><span class="line">    <span class="keyword">int</span>  data;</span><br><span class="line">    <span class="keyword">struct</span> BiTNode *lchild,*rchild;</span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"><span class="comment">//先序建立二叉树</span></span><br><span class="line"><span class="function">BiTree <span class="title">CreateBiTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    BiTree T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ch);</span><br><span class="line">    <span class="keyword">if</span>(ch==-<span class="number">1</span>)T=<span class="literal">NULL</span>;<span class="comment">//输入-1表示该节点为空</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));<span class="comment">//分配节点空间</span></span><br><span class="line">        T-&gt;data = ch;</span><br><span class="line">        T-&gt;lchild = CreateBiTree();<span class="comment">//创建左子树</span></span><br><span class="line">        T-&gt;rchild = CreateBiTree();<span class="comment">//创建右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;<span class="comment">//返回根节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>二叉树遍历。<br>前序遍历，中序遍历，后序遍历是根据访问根节点的顺序命名的。</li>
</ol>
<p>前序遍历：根，左，右</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%d "</span>,T-&gt;data);</span><br><span class="line">       PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">       PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>中序遍历：左，根，右</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">       PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%d "</span>,T-&gt;data);</span><br><span class="line">       PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后序遍历：左，右，根</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)&#123;</span><br><span class="line">       PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">       PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%d "</span>,T-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[二叉树基本操作。]]>
    
    </summary>
    
      <category term="Data_Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基本的排序算法]]></title>
    <link href="http://yoursite.com/2015/08/20/Blog3/"/>
    <id>http://yoursite.com/2015/08/20/Blog3/</id>
    <published>2015-08-19T16:00:00.000Z</published>
    <updated>2015-08-20T10:13:26.980Z</updated>
    <content type="html"><![CDATA[<p>1 选择排序。<br>思想： 每一次选择一个最大的数或者最小的数放在末尾。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Selectsort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">         <span class="keyword">int</span> Max=a[<span class="number">0</span>],index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;Max)&#123;</span><br><span class="line">                index=j;</span><br><span class="line">                Max=a[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp=a[index];</span><br><span class="line">        a[index]=a[i];</span><br><span class="line">        a[i]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2 冒泡排序。<br>思想：如果相邻的两个数不是递增的，则交换。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bunblesort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i,j;</span><br><span class="line">     <span class="keyword">for</span>(i=n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j-<span class="number">1</span>]&gt;a[j])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp=a[j-<span class="number">1</span>];</span><br><span class="line">                a[j-<span class="number">1</span>]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3 插入排序。<br>思想：对一个已经排好序的序列，插入一个新的数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insertsort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=a[i];</span><br><span class="line">        <span class="keyword">for</span>(j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">          <span class="keyword">if</span>(a[j]&lt;=temp)<span class="keyword">break</span>;</span><br><span class="line">            a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        a[j+<span class="number">1</span>]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4 二路归并排序。<br>思想：把一个带排序的序列分成两段进行排序，直到这个序列是一个数，然后把已经排序好的两个序列进行合并。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mergesort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(start==end)<span class="keyword">return</span>;</span><br><span class="line">     <span class="keyword">int</span> mid=(start+end)/<span class="number">2</span>;</span><br><span class="line">     Mergesort(a,start,mid);</span><br><span class="line">     Mergesort(a,mid+<span class="number">1</span>,end);</span><br><span class="line">     <span class="keyword">int</span> temp[Maxn],i=start,j=mid+<span class="number">1</span>,k=<span class="number">0</span>,t;</span><br><span class="line">     <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=end)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=a[j])</span><br><span class="line">           temp[k++]=a[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp[k++]=a[j++];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(i&gt;mid)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=end)</span><br><span class="line">          temp[k++]=a[j++];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(j&gt;end)&#123;</span><br><span class="line">       <span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">          temp[k++]=a[i++];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;k;t++)&#123;</span><br><span class="line">        a[t+start]=temp[t];</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5 快速排序。<br>思想：每一次选一个基准，把大于基准的数一道右边，小于基准的数移动到左边，最后的结果就是基准左边都是比它小的数，右边都是比它大的数。然后对于基准左边和右边重复以上操作。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = left;</span><br><span class="line">    <span class="keyword">int</span> j = right;</span><br><span class="line">    <span class="keyword">int</span> key = a[left];</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; key &lt;= a[j])&#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; key &gt;= a[i])&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    a[i] = key;</span><br><span class="line">    quicksort(a, left, i - <span class="number">1</span>);</span><br><span class="line">    quicksort(a, i + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[简单的排序算法你会了吗?]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C 内存对齐]]></title>
    <link href="http://yoursite.com/2015/08/20/Blog2/"/>
    <id>http://yoursite.com/2015/08/20/Blog2/</id>
    <published>2015-08-19T16:00:00.000Z</published>
    <updated>2015-08-20T10:07:11.777Z</updated>
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> A&#123;</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">short</span> c;</span><br><span class="line">&#125;m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> B&#123;</span><br><span class="line">   <span class="keyword">int</span> b;</span><br><span class="line">   <span class="keyword">char</span> a;</span><br><span class="line">   <span class="keyword">short</span> c;</span><br><span class="line">&#125;n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(m));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(n));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不知道有多少人，知道程序运行的结果？</p>
<p>答案是12:8.不明白怎么回事的请往下看。</p>
<p>首先说一下内存对齐的规则：</p>
<p>各成员变量存放的起始地址相对于结构的起始地址的偏移量必须为该变量的类型所占用的字节数的倍数。<br>在数据成员完成各自对齐之后，结构(或联合)本身也要进行对齐，对齐将按照#pragma pack指定的数值和结构(或联合)最大数据成员长度中，比较小的那个进行。</p>
<p>对于第一种情况：<br>a是1个字节，所以a在占据第0位，然后是b是4个字节，所以首地址与其实地址的偏移量必须是4的倍数是4，所以1,2,3系统自动填充别的字符，然后是c是两个字节，首地址是8，所以就变成了10个字节，这样，第一条规则结束了。然后看第二个规则，最大的成员变量是int，4个字节，#pragma pack默认的是8个字节，选比较小的是4，所以，还要补充2个字节，所以一共12个字节。</p>
<p>第二种就留给读者自己处理了。</p>
]]></content>
    <summary type="html">
    <![CDATA[一个简单的例子让你了解内存对齐。]]>
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
</feed>
